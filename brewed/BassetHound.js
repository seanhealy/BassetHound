// Generated by CoffeeScript 1.6.2
(function() {
  var BassetHound,
    __slice = [].slice;

  BassetHound = angular.module('BassetHound', []);

  BassetHound.factory('BassetHound', function($rootScope, $q) {
    var identifyUser, publicActions, registerTest, registerTests, registerTracker, setTestHandler, setUserProperty, track, _abTestHandler, _abTestStates, _callDelegate, _storeTestState, _trackers;

    _trackers = [];
    _abTestHandler = null;
    _abTestStates = {};
    _callDelegate = function() {
      var args, delegateAction;

      delegateAction = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (Object.isFunction(delegateAction)) {
        return delegateAction.apply(null, args);
      } else {
        return console.error("Delegate Doesn't respond to action.");
      }
    };
    registerTracker = function(tracker) {
      _trackers.push(tracker);
      console.log("BassetHound - Registering Tracker:", tracker.name);
      return _callDelegate(tracker.initialize);
    };
    setTestHandler = function(testHandler) {
      if (_abTestHandler != null) {
        console.error("BassetHound - AB Test Handler Already Set:", _abTestHandler.name);
        return;
      }
      console.log("BassetHound - Registering AB Test Handler:", testHandler.name);
      _abTestHandler = testHandler;
      return registerTests(_abTestHandler.activeTests());
    };
    /*
    # Events
    */

    track = function(eventName, metadata) {
      var tracker, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = _trackers.length; _i < _len; _i++) {
        tracker = _trackers[_i];
        _results.push(_callDelegate(tracker.track, eventName, metadata));
      }
      return _results;
    };
    setUserProperty = function(propertyData) {
      var tracker, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = _trackers.length; _i < _len; _i++) {
        tracker = _trackers[_i];
        _results.push(_callDelegate(tracker.setUserProperty, propertyData));
      }
      return _results;
    };
    identifyUser = function(identifier) {
      var tracker, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = _trackers.length; _i < _len; _i++) {
        tracker = _trackers[_i];
        _results.push(_callDelegate(tracker.identifyUser, identifier));
      }
      return _results;
    };
    /*
    # Tests
    */

    _storeTestState = function(name, activeVariation) {
      console.log(name, activeVariation);
      activeVariation = activeVariation.underscore().remove(/\W/g);
      _abTestStates[name] = activeVariation;
      return $rootScope.$broadcast("BassetHound::testStateResolved", {
        name: name,
        activeVariation: activeVariation
      });
    };
    registerTests = function(tests) {
      var test, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = tests.length; _i < _len; _i++) {
        test = tests[_i];
        _results.push(registerTest(test.name, test.variations));
      }
      return _results;
    };
    registerTest = function(name, variations) {
      var registerTestPromise, sanitizedName;

      sanitizedName = name.underscore().remove(/\W/g);
      registerTestPromise = _callDelegate(_abTestHandler.registerTest, sanitizedName, variations);
      return registerTestPromise.then(function(activeVariation) {
        return _storeTestState(sanitizedName, activeVariation);
      }, function(error) {
        console.error("Yuck!");
        if (Object.isObject(variations)) {
          return _storeTestState(sanitizedName, Object.keys(variations).first());
        } else {
          return _storeTestState(sanitizedName, variations.first());
        }
      });
    };
    publicActions = {
      _debug: function() {
        return {
          _trackers: _trackers,
          _abTestHandler: _abTestHandler,
          _abTestStates: _abTestStates
        };
      },
      registerTracker: registerTracker,
      setTestHandler: setTestHandler,
      track: track,
      setUserProperty: setUserProperty,
      identifyUser: identifyUser,
      registerTest: registerTest
    };
    window.bh = publicActions;
    return publicActions;
  });

  BassetHound.directive('bhTrack', function(BassetHound) {
    return function(scope, element, attrs) {
      var eventName;

      eventName = "";
      attrs.$observe('bhTrack', function(value) {
        return eventName = value;
      });
      return element.on('click', function() {
        return BassetHound.track(eventName);
      });
    };
  });

  BassetHound.directive('bhTestClassList', function(BassetHound, $rootScope) {
    return function($scope, element, attrs) {
      return $rootScope.$on('BassetHound::testStateResolved', function(event, test) {
        console.log('here', arguments);
        return element.addClass("bh-" + test.name + "-" + test.activeVariation);
      });
    };
  });

  BassetHound.directive('bhIf', function(BassetHound, $rootScope) {
    return function($scope, element, attrs) {
      element.addClass('ng-hide');
      return attrs.$observe('bhIf', function(condition) {
        var goalTestName, goalTestVariation, parsedCondition;

        if (Object.isString(condition)) {
          parsedCondition = condition.split('is').map(function(el) {
            return el.trim();
          });
          if ((parsedCondition != null) && Object.isArray(parsedCondition) && parsedCondition.length === 2) {
            goalTestName = parsedCondition[0], goalTestVariation = parsedCondition[1];
            return $rootScope.$on('BassetHound::testStateResolved', function(event, test) {
              var resolvedTestName, resolvedTestVariation;

              resolvedTestName = test.name;
              resolvedTestVariation = test.activeVariation;
              if (goalTestName === resolvedTestName) {
                if (goalTestVariation === resolvedTestVariation) {
                  return element.removeClass('ng-hide');
                } else {
                  return element.remove();
                }
              }
            });
          } else {
            return console.error("BassetHound - Invalid Test Condition:", condition);
          }
        } else {
          return console.error("BassetHound - Invalid Test Condition:", condition);
        }
      });
    };
  });

}).call(this);

/*
//@ sourceMappingURL=BassetHound.map
*/
